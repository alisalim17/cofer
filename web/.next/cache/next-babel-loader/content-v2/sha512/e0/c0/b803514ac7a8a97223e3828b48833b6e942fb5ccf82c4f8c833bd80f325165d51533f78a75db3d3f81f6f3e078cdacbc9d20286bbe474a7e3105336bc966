{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const LoginDocument = gql`\n    mutation Login($input: LoginInput!) {\n  login(input: $input) {\n    ok\n  }\n}\n    `;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}","map":{"version":3,"sources":["D:/Proglamlama/Visual Studio Code Projects/projects/Best Projects/cofer/web/src/generated/graphql.ts"],"names":["gql","Apollo","defaultOptions","LoginDocument","useLoginMutation","baseOptions","options","useMutation"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAKA,MAAMC,cAAc,GAAI,EAAxB;AACA;;AA6EA,OAAO,MAAMC,aAAa,GAAGH,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA,KANO;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,gBAAT,CAA0BC,WAA1B,EAA2G;AAC1G,QAAMC,OAAO,mCAAOJ,cAAP,GAA0BG,WAA1B,CAAb;;AACA,SAAOJ,MAAM,CAACM,WAAP,CAA0DJ,aAA1D,EAAyEG,OAAzE,CAAP;AACD","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type LoginInput = {\n  usernameOrEmail: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  login: RegisterResponse;\n  register: RegisterResponse;\n  logout: Scalars['Boolean'];\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  input: RegisterInput;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  allUsers?: Maybe<Array<User>>;\n  me?: Maybe<User>;\n};\n\nexport type RegisterInput = {\n  username: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type RegisterResponse = {\n  __typename?: 'RegisterResponse';\n  ok: Scalars['Boolean'];\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['String'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type LoginMutationVariables = Exact<{\n  input: LoginInput;\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'RegisterResponse' }\n    & Pick<RegisterResponse, 'ok'>\n  ) }\n);\n\n\nexport const LoginDocument = gql`\n    mutation Login($input: LoginInput!) {\n  login(input: $input) {\n    ok\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;"]},"metadata":{},"sourceType":"module"}